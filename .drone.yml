---
kind: pipeline
type: docker
name: compliance

platform:
  os: linux
  arch: arm64

workspace:
  base: /go
  path: src/code.gitea.io/gitea

steps:
  - name: deps-frontend
    pull: always
    image: node:12
    commands:
      - make node_modules

  - name: lint-frontend
    pull: always
    image: node:12
    commands:
      - make lint-frontend
    depends_on: [deps-frontend]

  - name: lint-backend
    pull: always
    image: golang:1.14
    commands:
      - make lint-backend
    environment:
      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
      GOSUMDB: sum.golang.org
      TAGS: bindata sqlite sqlite_unlock_notify

  - name: build-frontend
    pull: always
    image: node:10 # this step is kept at the lowest version of node that we support
    commands:
      - make frontend
    depends_on: [lint-frontend]

  - name: build-backend-no-gcc
    pull: always
    image: golang:1.12 # this step is kept as the lowest version of golang that we support
    environment:
      GO111MODULE: on
      GOPROXY: off
    commands:
      - go build -mod=vendor -o gitea_no_gcc # test if build succeeds without the sqlite tag
    depends_on: [lint-backend]

  - name: build-backend-arm64
    pull: always
    image: golang:1.14
    environment:
      GO111MODULE: on
      GOPROXY: off
      GOOS: linux
      GOARCH: arm64
      TAGS: bindata
    commands:
      - make backend # test cross compile
      - rm ./gitea # clean
    depends_on: [lint-backend]

  - name: build-backend-386
    pull: always
    image: golang:1.14
    environment:
      GO111MODULE: on
      GOPROXY: off
      GOOS: linux
      GOARCH: 386
    commands:
      - go build -mod=vendor -o gitea_linux_386 # test if compatible with 32 bit
    depends_on: [lint-backend]

---
kind: pipeline
name: testing-amd64

platform:
  os: linux
  arch: amd64

depends_on:
  - compliance

workspace:
  base: /go
  path: src/code.gitea.io/gitea

services:
  - name: mysql
    pull: default
    image: mysql:5.7
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_DATABASE: test
      GOPROXY: off
      TAGS: bindata sqlite sqlite_unlock_notify
      GITLAB_READ_TOKEN:
        from_secret: gitlab_read_token
    depends_on:
      - build

  - name: mysql8
    pull: default
    image: mysql:8.0
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
      MYSQL_DATABASE: testgitea

  - name: cockroach
    pull: default
    image: cockroachdb/cockroach:v20.1.1
    commands:
    - /cockroach/cockroach start-single-node --insecure

  - name: mssql
    pull: default
    image: mcr.microsoft.com/mssql/server:latest
    environment:
      ACCEPT_EULA: Y
      MSSQL_PID: Standard
      SA_PASSWORD: MwantsaSecurePassword1

  - name: ldap
    pull: default
    image: gitea/test-openldap:latest

  - name: elasticsearch
    pull: default
    environment:
      discovery.type: single-node
    image: elasticsearch:7.5.0

steps:
  - name: fetch-tags
    pull: default
    image: docker:git
    commands:
      - git fetch --tags --force
    when:
      event:
        exclude:
          - pull_request

  - name: build
    pull: always
    image: golang:1.14
    commands:
      - make backend
    environment:
      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
      GOSUMDB: sum.golang.org
      TAGS: bindata sqlite sqlite_unlock_notify

  - name: tag-pre-condition
    pull: always
    image: drone/git
    commands:
      - git update-ref refs/heads/tag_test ${DRONE_COMMIT_SHA}

  - name: unit-test
    pull: always
    image: golang:1.14
    commands:
      - make unit-test-coverage test-check
    environment:
      GOPROXY: off
      TAGS: bindata sqlite sqlite_unlock_notify
      GITHUB_READ_TOKEN:
        from_secret: github_read_token

  - name: test-mysql
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - make test-mysql-migration integration-test-coverage
    environment:
      GOPROXY: off
      TAGS: bindata
      TEST_LDAP: 1
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

  - name: test-mysql8
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - timeout -s ABRT 40m make test-mysql8-migration test-mysql8
    environment:
      GOPROXY: off
      TAGS: bindata
      TEST_LDAP: 1
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

  - name: test-cockroach
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - make test-cockroach-migration test-cockroach
    environment:
      GOPROXY: off
      TAGS: bindata
      TEST_LDAP: 1
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

  - name: test-mssql
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - make test-mssql-migration test-mssql
    environment:
      GOPROXY: off
      TAGS: bindata
      TEST_LDAP: 1
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

  - name: generate-coverage
    pull: always
    image: golang:1.14
    commands:
      - make coverage
    environment:
      GOPROXY: off
      TAGS: bindata
    depends_on:
      - unit-test
      - test-mysql
    when:
      branch:
        - master
      event:
        - push
        - pull_request

  - name: coverage
    pull: always
    image: robertstettner/drone-codecov
    settings:
      files:
        - coverage.all
    environment:
      CODECOV_TOKEN:
        from_secret: codecov_token
    depends_on:
      - generate-coverage
    when:
      branch:
        - master
      event:
        - push
        - pull_request

---
kind: pipeline
name: testing-arm64

platform:
  os: linux
  arch: arm64

depends_on:
  - compliance

workspace:
  base: /go
  path: src/code.gitea.io/gitea

services:
  - name: pgsql
    pull: default
    image: postgres:9.5
    environment:
      POSTGRES_DB: test
      POSTGRES_PASSWORD: postgres

  - name: ldap
    pull: default
    image: gitea/test-openldap:latest

steps:
  - name: fetch-tags
    pull: default
    image: docker:git
    commands:
      - git fetch --tags --force
    when:
      event:
        exclude:
          - pull_request

  - name: build
    pull: always
    image: golang:1.14
    commands:
      - make backend
    environment:
      GOPROXY: https://goproxy.cn # proxy.golang.org is blocked in China, this proxy is not
      GOSUMDB: sum.golang.org
      TAGS: bindata sqlite sqlite_unlock_notify

  - name: test-sqlite
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - timeout -s ABRT 40m make test-sqlite-migration test-sqlite
    environment:
      GOPROXY: off
      TAGS: bindata
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

  - name: test-pgsql
    pull: always
    image: golang:1.14
    commands:
      - "curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash"
      - apt-get install -y git-lfs
      - timeout -s ABRT 40m make test-pgsql-migration test-pgsql
    environment:
      GOPROXY: off
      TAGS: bindata
      TEST_LDAP: 1
      USE_REPO_TEST_DIR: 1
    depends_on:
      - build

---
kind: pipeline
name: translations

platform:
  os: linux
  arch: arm64

workspace:
  base: /go
  path: src/code.gitea.io/gitea

trigger:
  branch:
    - master
  event:
    - push

steps:
  - name: download
    pull: always
    image: jonasfranz/crowdin
    settings:
      download: true
      export_dir: options/locale/
      ignore_branch: true
      project_identifier: gitea
    environment:
      CROWDIN_KEY:
        from_secret: crowdin_key

  - name: update
    pull: default
    image: alpine:3.12
    commands:
      - ./build/update-locales.sh

  - name: push
    pull: always
    image: appleboy/drone-git-push
    settings:
      author_email: "teabot@gitea.io"
      author_name: GiteaBot
      commit: true
      commit_message: "[skip ci] Updated translations via Crowdin"
      remote: "git@github.com:go-gitea/gitea.git"
    environment:
      GIT_PUSH_SSH_KEY:
        from_secret: git_push_ssh_key

  - name: upload_translations
    pull: always
    image: jonasfranz/crowdin
    settings:
      files:
        locale_en-US.ini: options/locale/locale_en-US.ini
      ignore_branch: true
      project_identifier: gitea
    environment:
      CROWDIN_KEY:
        from_secret: crowdin_key

---
kind: pipeline
name: release-latest

platform:
  os: linux
  arch: amd64

workspace:
  base: /source
  path: /

trigger:
  branch:
    - main
    - "release/*"
  event:
    - push
  paths:
    exclude:
      - "docs/**"

volumes:
  - name: deps
    temp: {}

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: deps-frontend
    image: node:20
    pull: always
    commands:
      - make deps-frontend

  - name: deps-backend
    image: gitea/test_env:linux-1.20-amd64
    pull: always
    commands:
      - make deps-backend
    volumes:
      - name: deps
        path: /go

  - name: static
    image: techknowlogick/xgo:go-1.20.x
    pull: always
    commands:
      # Upgrade to node 20 once https://github.com/techknowlogick/xgo/issues/163 is resolved
      - curl -sL https://deb.nodesource.com/setup_16.x | bash - && apt-get -qqy install nodejs
      - export PATH=$PATH:$GOPATH/bin
      - make release
    environment:
      GOPROXY: https://goproxy.io # proxy.golang.org is blocked in China, this proxy is not
      TAGS: bindata sqlite sqlite_unlock_notify
      DEBIAN_FRONTEND: noninteractive
    volumes:
      - name: deps
        path: /go

  - name: gpg-sign
    image: plugins/gpgsign:1
    pull: always
    settings:
      detach_sign: true
      excludes:
        - "dist/release/*.sha256"
      files:
        - "dist/release/*"
    environment:
      GPGSIGN_KEY:
        from_secret: gpgsign_key
      GPGSIGN_PASSPHRASE:
        from_secret: gpgsign_passphrase

  - name: release-branch
    image: woodpeckerci/plugin-s3:latest
    pull: always
    settings:
      acl:
        from_secret: aws_s3_acl
      region:
        from_secret: aws_s3_region
      bucket:
        from_secret: aws_s3_bucket
      endpoint:
        from_secret: aws_s3_endpoint
      path_style:
        from_secret: aws_s3_path_style
      source: "dist/release/*"
      strip_prefix: dist/release/
      target: "/gitea/${DRONE_BRANCH##release/v}"
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    when:
      branch:
        - "release/*"
      event:
        - push

  - name: release-main
    image: woodpeckerci/plugin-s3:latest
    settings:
      acl:
        from_secret: aws_s3_acl
      region:
        from_secret: aws_s3_region
      bucket:
        from_secret: aws_s3_bucket
      endpoint:
        from_secret: aws_s3_endpoint
      path_style:
        from_secret: aws_s3_path_style
      source: "dist/release/*"
      strip_prefix: dist/release/
      target: /gitea/main
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    when:
      branch:
        - main
      event:
        - push

---
kind: pipeline
name: release-version

platform:
  os: linux
  arch: amd64

workspace:
  base: /source
  path: /

trigger:
  event:
    - tag

volumes:
  - name: deps
    temp: {}

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: deps-frontend
    image: node:20
    pull: always
    commands:
      - make deps-frontend

  - name: deps-backend
    image: gitea/test_env:linux-1.20-amd64
    pull: always
    commands:
      - make deps-backend
    volumes:
      - name: deps
        path: /go

  - name: static
    image: techknowlogick/xgo:go-1.20.x
    pull: always
    commands:
      # Upgrade to node 20 once https://github.com/techknowlogick/xgo/issues/163 is resolved
      - curl -sL https://deb.nodesource.com/setup_16.x | bash - && apt-get -qqy install nodejs
      - export PATH=$PATH:$GOPATH/bin
      - make release
    environment:
      GOPROXY: https://goproxy.io # proxy.golang.org is blocked in China, this proxy is not
      TAGS: bindata sqlite sqlite_unlock_notify
      DEBIAN_FRONTEND: noninteractive
    depends_on: [fetch-tags]
    volumes:
      - name: deps
        path: /go

  - name: gpg-sign
    image: plugins/gpgsign:1
    pull: always
    settings:
      detach_sign: true
      excludes:
        - "dist/release/*.sha256"
      files:
        - "dist/release/*"
    environment:
      GPGSIGN_KEY:
        from_secret: gpgsign_key
      GPGSIGN_PASSPHRASE:
        from_secret: gpgsign_passphrase
    depends_on: [static]

  - name: release-tag
    image: woodpeckerci/plugin-s3:latest
    pull: always
    settings:
      acl:
        from_secret: aws_s3_acl
      region:
        from_secret: aws_s3_region
      bucket:
        from_secret: aws_s3_bucket
      endpoint:
        from_secret: aws_s3_endpoint
      path_style:
        from_secret: aws_s3_path_style
      source: "dist/release/*"
      strip_prefix: dist/release/
      target: "/gitea/${DRONE_TAG##v}"
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
    depends_on: [gpg-sign]

  - name: github
    image: plugins/github-release:latest
    pull: always
    settings:
      files:
        - "dist/release/*"
      file_exists: overwrite
    environment:
      GITHUB_TOKEN:
        from_secret: github_token
    depends_on: [gpg-sign]

---
kind: pipeline
type: docker
name: docker-linux-amd64-release-version

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - "refs/tags/**"
    exclude:
      - "refs/tags/**-rc*"
  paths:
    exclude:
      - "docs/**"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: true
      auto_tag_suffix: linux-amd64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: true
      auto_tag_suffix: linux-amd64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request
---

kind: pipeline
type: docker
name: docker-linux-amd64-release-candidate-version

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    - "refs/tags/**-rc*"
  paths:
    exclude:
      - "docs/**"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      tags: ${DRONE_TAG##v}-linux-amd64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      tags: ${DRONE_TAG##v}-linux-amd64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
type: docker
name: docker-linux-amd64-release

platform:
  os: linux
  arch: amd64

trigger:
  ref:
  - refs/heads/main

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: false
      tags: nightly-linux-amd64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: false
      tags: nightly-linux-amd64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
name: docker-linux-amd64-release-branch

platform:
  os: linux
  arch: amd64

trigger:
  ref:
  - "refs/heads/release/v*"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: false
      tags: ${DRONE_BRANCH##release/v}-nightly-linux-amd64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: false
      tags: ${DRONE_BRANCH##release/v}-nightly-linux-amd64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
type: docker
name: docker-linux-arm64-release-version

platform:
  os: linux
  arch: arm64

trigger:
  ref:
    include:
      - "refs/tags/**"
    exclude:
      - "refs/tags/**-rc*"
  paths:
    exclude:
      - "docs/**"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: true
      auto_tag_suffix: linux-arm64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: true
      auto_tag_suffix: linux-arm64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
type: docker
name: docker-linux-arm64-release-candidate-version

platform:
  os: linux
  arch: arm64

trigger:
  ref:
    - "refs/tags/**-rc*"
  paths:
    exclude:
      - "docs/**"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      tags: ${DRONE_TAG##v}-linux-arm64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      tags: ${DRONE_TAG##v}-linux-arm64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
type: docker
name: docker-linux-arm64-release

platform:
  os: linux
  arch: arm64

trigger:
  ref:
  - refs/heads/main
  paths:
    exclude:
      - "docs/**"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: false
      tags: nightly-linux-arm64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: false
      tags: nightly-linux-arm64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
name: docker-linux-arm64-release-branch

platform:
  os: linux
  arch: arm64

trigger:
  ref:
  - "refs/heads/release/v*"

steps:
  - name: fetch-tags
    image: docker:git
    pull: always
    commands:
      - git fetch --tags --force

  - name: publish
    image: plugins/docker:latest
    pull: always
    settings:
      auto_tag: false
      tags: ${DRONE_BRANCH##release/v}-nightly-linux-arm64
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

  - name: publish-rootless
    image: plugins/docker:latest
    settings:
      dockerfile: Dockerfile.rootless
      auto_tag: false
      tags: ${DRONE_BRANCH##release/v}-nightly-linux-arm64-rootless
      repo: gitea/gitea
      build_args:
        - GOPROXY=https://goproxy.io
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username
    environment:
      PLUGIN_MIRROR:
        from_secret: plugin_mirror
      DOCKER_BUILDKIT: 1
    when:
      event:
        exclude:
        - pull_request

---
kind: pipeline
type: docker
name: docker-manifest-version

platform:
  os: linux
  arch: amd64

steps:
  - name: manifest-rootless
    image: plugins/manifest
    pull: always
    settings:
      auto_tag: true
      ignore_missing: true
      spec: docker/manifest.rootless.tmpl
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username

  - name: manifest
    image: plugins/manifest
    settings:
      auto_tag: true
      ignore_missing: true
      spec: docker/manifest.tmpl
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username

trigger:
  ref:
  - "refs/tags/**"
  paths:
    exclude:
      - "docs/**"

depends_on:
  - docker-linux-amd64-release-version
  - docker-linux-amd64-release-candidate-version
  - docker-linux-arm64-release-version
  - docker-linux-arm64-release-candidate-version

---
kind: pipeline
type: docker
name: docker-manifest

platform:
  os: linux
  arch: amd64

steps:
  - name: manifest-rootless
    image: plugins/manifest
    pull: always
    settings:
      auto_tag: false
      ignore_missing: true
      spec: docker/manifest.rootless.tmpl
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username

  - name: manifest
    image: plugins/manifest
    settings:
      auto_tag: false
      ignore_missing: true
      spec: docker/manifest.tmpl
      password:
        from_secret: docker_password
      username:
        from_secret: docker_username

trigger:
  ref:
  - refs/heads/main
  - "refs/heads/release/v*"
  paths:
    exclude:
      - "docs/**"

depends_on:
  - docker-linux-amd64-release
  - docker-linux-arm64-release
  - docker-linux-amd64-release-branch
  - docker-linux-arm64-release-branch
